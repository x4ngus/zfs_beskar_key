use std::env;
use std::fs;
use std::path::{Path, PathBuf};

fn main() {
    let manifest_dir = env::var("CARGO_MANIFEST_DIR").expect("CARGO_MANIFEST_DIR not set");
    let out_dir = env::var("OUT_DIR").expect("OUT_DIR not set");

    let templates = [
        (
            "MODULE_SETUP_TEMPLATE",
            "src/dracut/templates/module-setup.sh",
        ),
        ("SCRIPT_TEMPLATE", "src/dracut/templates/beskar-load-key.sh"),
        (
            "SERVICE_TEMPLATE",
            "src/dracut/templates/beskar-load-key.service",
        ),
    ];

    let mut output = String::from("// Auto-generated by build.rs â€” do not edit.\n");

    for (name, rel_path) in templates {
        let path = Path::new(&manifest_dir).join(rel_path);
        let contents = fs::read_to_string(&path)
            .unwrap_or_else(|err| panic!("Failed to read {}: {}", path.display(), err));
        output.push_str(&format!(
            "pub(crate) const {}: &str = {};\n",
            name,
            escape_for_rust(&contents)
        ));
        println!("cargo:rerun-if-changed={}", rel_path);
    }

    let out_file = PathBuf::from(out_dir).join("dracut_templates.rs");
    fs::write(&out_file, output)
        .unwrap_or_else(|err| panic!("Failed to write {}: {}", out_file.display(), err));
}

fn escape_for_rust(input: &str) -> String {
    format!("{:?}", input)
}
