#!/bin/bash
# Generated by zfs_beskar_key v{{VERSION}}
set -euo pipefail
set -E

LABEL="{{TOKEN_LABEL}}"
MOUNTPOINT="{{MOUNTPOINT}}"
KEY_PATH="{{KEY_PATH}}"
KEY_SHA256="{{KEY_SHA256}}"
MAX_WAIT_SECONDS=30
SLEEP_INTERVAL=1
MOUNT_RETRIES=3
MOUNT_OPTS="ro,nosuid,nodev,noexec"

log_line() {
    echo "[BESKAR] $*" >&2
}

info() {
    log_line "INFO :: $*"
}

warn() {
    log_line "WARN :: $*"
}

error() {
    log_line "ERROR :: $*"
}

fail() {
    error "$*"
    exit 1
}

trap 'rc=$?; if (( rc != 0 )); then error "Beskar loader aborted (rc=${rc})."; fi' EXIT

wait_for_device() {
    local elapsed=0
    while (( elapsed < MAX_WAIT_SECONDS )); do
        if blkid -L "$LABEL" >/dev/null 2>&1; then
            return 0
        fi
        sleep "$SLEEP_INTERVAL"
        ((elapsed += SLEEP_INTERVAL))
    done
    return 1
}

wait_for_key() {
    local elapsed=0
    while (( elapsed < MAX_WAIT_SECONDS )); do
        if [[ -f "$KEY_PATH" ]]; then
            return 0
        fi
        sleep "$SLEEP_INTERVAL"
        ((elapsed += SLEEP_INTERVAL))
    done
    return 1
}

settle_udev() {
    if command -v udevadm >/dev/null 2>&1; then
        if ! udevadm settle >/dev/null 2>&1; then
            warn "udevadm settle reported an error; continuing regardless."
        fi
    fi
}

mount_token() {
    local device="$1"
    mkdir -p "$MOUNTPOINT"
    if mountpoint -q "$MOUNTPOINT"; then
        info "Token already mounted at $MOUNTPOINT."
        return 0
    fi

    local attempt=0
    while (( attempt < MOUNT_RETRIES )); do
        if mount -o "$MOUNT_OPTS" "$device" "$MOUNTPOINT"; then
            info "Mounted $device at $MOUNTPOINT with opts=$MOUNT_OPTS."
            return 0
        fi
        warn "Mount attempt $((attempt + 1)) on $device failed; retrying…"
        sleep "$SLEEP_INTERVAL"
        ((attempt += 1))
    done
    return 1
}

verify_checksum() {
    if [[ -z "${KEY_SHA256}" ]]; then
        warn "No checksum recorded; skipping key verification."
        return 0
    fi

    local expected="${KEY_SHA256,,}"
    local actual=""
    if read -r actual _ < <(sha256sum "$KEY_PATH"); then
        actual="${actual,,}"
    else
        fail "Unable to compute SHA-256 for $KEY_PATH."
    fi

    if [[ "$actual" != "$expected" ]]; then
        fail "Checksum mismatch for $KEY_PATH (expected $expected, found $actual)."
    fi
    info "Key checksum verified for $KEY_PATH."
}

main() {
    info "Awaiting token label $LABEL (timeout ${MAX_WAIT_SECONDS}s)…"
    if ! wait_for_device; then
        fail "Token $LABEL not detected within ${MAX_WAIT_SECONDS}s."
    fi

    settle_udev

    local device
    device="$(blkid -L "$LABEL" 2>/dev/null || true)"
    if [[ -z "$device" ]]; then
        fail "Token label $LABEL resolved earlier but vanished before mount."
    fi
    info "Token $LABEL detected at $device."

    if ! mount_token "$device"; then
        fail "Unable to mount $device at $MOUNTPOINT after ${MOUNT_RETRIES} attempts."
    fi

    info "Waiting for key file $KEY_PATH (timeout ${MAX_WAIT_SECONDS}s)…"
    if ! wait_for_key; then
        fail "Key file $KEY_PATH not detected within ${MAX_WAIT_SECONDS}s."
    fi

    verify_checksum

    info "Invoking zfs load-key -a using keylocation $KEY_PATH."
    if zfs load-key -a; then
        info "zfs load-key -a completed successfully."
    else
        local rc=$?
        fail "zfs load-key -a returned non-zero status (${rc}); native prompts will take over."
    fi
}

main
